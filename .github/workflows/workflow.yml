name: workflow

on: [push, pull_request]

jobs:
  lock:
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - run: curl -sSL https://install.python-poetry.org | python3 -
      - run: poetry lock
      - uses: actions/cache@v2
        with:
          path: poetry.lock
          key: ${{ github.sha }}-${{ matrix.python-version }}
  pytest-dynalite:
    needs: lock
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
    runs-on: "ubuntu-latest"
    services:
      dynalite:
        image: ghcr.io/hennge/dynalite:latest
        ports:
          - 8000:8000
    env:
      DYNAMODB_URL: http://localhost:8000
      DYNAMODB_NAME: dynalite
      AWS_ACCESS_KEY_ID: dummy
      AWS_SECRET_ACCESS_KEY: dummy
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v2
        with:
          path: poetry.lock
          key: ${{ github.sha }}-${{ matrix.python-version }}
      - run: curl -sSL https://install.python-poetry.org | python3 -
      - run: poetry install --extras aiohttp --extras httpx
      - run: poetry run pytest --verbose
  pytest-dynamodb-local:
    needs: lock
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
    runs-on: "ubuntu-latest"
    services:
      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000
    env:
      DYNAMODB_URL: http://localhost:8000
      DYNAMODB_NAME: dynamodb-local
      AWS_ACCESS_KEY_ID: dummy
      AWS_SECRET_ACCESS_KEY: dummy
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v2
        with:
          path: poetry.lock
          key: ${{ github.sha }}-${{ matrix.python-version }}
      - run: curl -sSL https://install.python-poetry.org | python3 -
      - run: poetry install --extras aiohttp --extras httpx
      - run: poetry run pytest --verbose
  pytest-localstack:
    needs: lock
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
    runs-on: "ubuntu-latest"
    services:
      dynamodb:
        image: localstack/localstack:0.14.2
        ports:
          - 4566-4583:4566-4583
    env:
      DYNAMODB_URL: http://localhost:4566
      DYNAMODB_NAME: localstack
      AWS_ACCESS_KEY_ID: dummy
      AWS_SECRET_ACCESS_KEY: dummy
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v2
        with:
          path: poetry.lock
          key: ${{ github.sha }}-${{ matrix.python-version }}
      - run: curl -sSL https://install.python-poetry.org | python3 -
      - run: poetry install --extras aiohttp --extras httpx
      - run: poetry run pytest --verbose
  pytest-scylla:
    needs: lock
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
    runs-on: "ubuntu-latest"
    services:
      dynalite:
        image: scylladb/scylla:latest
        command: ["--alternator-port", "8000", "--alternator-write-isolation", "always"]
        ports:
          - 8000:8000
    env:
      DYNAMODB_URL: http://localhost:8000
      DYNAMODB_FLAVOR: scylla
      DYNAMODB_NAME: scylla
      AWS_ACCESS_KEY_ID: dummy
      AWS_SECRET_ACCESS_KEY: dummy
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v2
        with:
          path: poetry.lock
          key: ${{ github.sha }}-${{ matrix.python-version }}
      - run: curl -sSL https://install.python-poetry.org | python3 -
      - run: poetry install --extras aiohttp --extras httpx
      - run: poetry run pytest --verbose
  mypy:
    needs: lock
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v2
        with:
          path: poetry.lock
          key: ${{ github.sha }}-${{ matrix.python-version }}
      - run: curl -sSL https://install.python-poetry.org | python3 -
      - run: poetry install --extras aiohttp --extras httpx
      - run: poetry run mypy
  isort:
    needs: lock
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.11"
      - uses: actions/cache@v2
        with:
          path: poetry.lock
          key: ${{ github.sha }}-3.11
      - run: curl -sSL https://install.python-poetry.org | python3 -
      - run: poetry install --extras aiohttp --extras httpx
      - run: poetry run isort --check --diff src tests
  black:
    needs: lock
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.11"
      - uses: actions/cache@v2
        with:
          path: poetry.lock
          key: ${{ github.sha }}-3.11
      - run: curl -sSL https://install.python-poetry.org | python3 -
      - run: poetry install --extras aiohttp --extras httpx
      - run: poetry run black --check src/ tests/
